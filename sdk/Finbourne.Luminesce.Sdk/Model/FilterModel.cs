/*
 * FINBOURNE Luminesce Web API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Luminesce.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Luminesce.Sdk.Model
{
    /// <summary>
    /// Representation of the data used in a filter for the where clause
    /// </summary>
    [DataContract(Name = "FilterModel")]
    public partial class FilterModel : IEquatable<FilterModel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets FilterType
        /// </summary>
        [DataMember(Name = "filterType", IsRequired = true, EmitDefaultValue = true)]
        public FilterType FilterType { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public Type? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FilterModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterModel" /> class.
        /// </summary>
        /// <param name="filterType">filterType (required).</param>
        /// <param name="type">type.</param>
        /// <param name="filter">The filter value.</param>
        /// <param name="filterTo">The upper bound filter value for the number filter type.</param>
        /// <param name="values">An array of possible values for the set filter type.</param>
        /// <param name="dateFrom">A lower bound date for the date filter type.</param>
        /// <param name="dateTo">An upper bound date for the date filter type.</param>
        public FilterModel(FilterType filterType = default(FilterType), Type? type = default(Type?), string filter = default(string), decimal? filterTo = default(decimal?), List<string> values = default(List<string>), string dateFrom = default(string), string dateTo = default(string))
        {
            this.FilterType = filterType;
            this.Type = type;
            this.Filter = filter;
            this.FilterTo = filterTo;
            this.Values = values;
            this.DateFrom = dateFrom;
            this.DateTo = dateTo;
        }

        /// <summary>
        /// The filter value
        /// </summary>
        /// <value>The filter value</value>
        [DataMember(Name = "filter", EmitDefaultValue = true)]
        public string Filter { get; set; }

        /// <summary>
        /// The upper bound filter value for the number filter type
        /// </summary>
        /// <value>The upper bound filter value for the number filter type</value>
        [DataMember(Name = "filterTo", EmitDefaultValue = true)]
        public decimal? FilterTo { get; set; }

        /// <summary>
        /// An array of possible values for the set filter type
        /// </summary>
        /// <value>An array of possible values for the set filter type</value>
        [DataMember(Name = "values", EmitDefaultValue = true)]
        public List<string> Values { get; set; }

        /// <summary>
        /// A lower bound date for the date filter type
        /// </summary>
        /// <value>A lower bound date for the date filter type</value>
        [DataMember(Name = "dateFrom", EmitDefaultValue = true)]
        public string DateFrom { get; set; }

        /// <summary>
        /// An upper bound date for the date filter type
        /// </summary>
        /// <value>An upper bound date for the date filter type</value>
        [DataMember(Name = "dateTo", EmitDefaultValue = true)]
        public string DateTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FilterModel {\n");
            sb.Append("  FilterType: ").Append(FilterType).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  FilterTo: ").Append(FilterTo).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  DateFrom: ").Append(DateFrom).Append("\n");
            sb.Append("  DateTo: ").Append(DateTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FilterModel);
        }

        /// <summary>
        /// Returns true if FilterModel instances are equal
        /// </summary>
        /// <param name="input">Instance of FilterModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilterModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FilterType == input.FilterType ||
                    this.FilterType.Equals(input.FilterType)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.FilterTo == input.FilterTo ||
                    (this.FilterTo != null &&
                    this.FilterTo.Equals(input.FilterTo))
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                ) && 
                (
                    this.DateFrom == input.DateFrom ||
                    (this.DateFrom != null &&
                    this.DateFrom.Equals(input.DateFrom))
                ) && 
                (
                    this.DateTo == input.DateTo ||
                    (this.DateTo != null &&
                    this.DateTo.Equals(input.DateTo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.FilterType.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Filter != null)
                {
                    hashCode = (hashCode * 59) + this.Filter.GetHashCode();
                }
                if (this.FilterTo != null)
                {
                    hashCode = (hashCode * 59) + this.FilterTo.GetHashCode();
                }
                if (this.Values != null)
                {
                    hashCode = (hashCode * 59) + this.Values.GetHashCode();
                }
                if (this.DateFrom != null)
                {
                    hashCode = (hashCode * 59) + this.DateFrom.GetHashCode();
                }
                if (this.DateTo != null)
                {
                    hashCode = (hashCode * 59) + this.DateTo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
