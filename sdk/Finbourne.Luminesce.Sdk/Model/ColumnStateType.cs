/*
 * FINBOURNE Luminesce Web API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Luminesce.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Luminesce.Sdk.Model
{
    /// <summary>
    /// Representation of a column within the grid
    /// </summary>
    [DataContract(Name = "ColumnStateType")]
    public partial class ColumnStateType : IEquatable<ColumnStateType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ColumnStateType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ColumnStateType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ColumnStateType" /> class.
        /// </summary>
        /// <param name="colId">Unique identifier for the column (required).</param>
        /// <param name="hide">Flag to determine whether the column is visible in the grid (required).</param>
        /// <param name="sort">The sort order (asc or desc).</param>
        /// <param name="sortIndex">The index of the sort to determine the order in which the sorts are applied.</param>
        public ColumnStateType(string colId = default(string), bool hide = default(bool), string sort = default(string), int? sortIndex = default(int?))
        {
            // to ensure "colId" is required (not null)
            if (colId == null)
            {
                throw new ArgumentNullException("colId is a required property for ColumnStateType and cannot be null");
            }
            this.ColId = colId;
            this.Hide = hide;
            this.Sort = sort;
            this.SortIndex = sortIndex;
        }

        /// <summary>
        /// Unique identifier for the column
        /// </summary>
        /// <value>Unique identifier for the column</value>
        [DataMember(Name = "colId", IsRequired = true, EmitDefaultValue = true)]
        public string ColId { get; set; }

        /// <summary>
        /// Flag to determine whether the column is visible in the grid
        /// </summary>
        /// <value>Flag to determine whether the column is visible in the grid</value>
        [DataMember(Name = "hide", IsRequired = true, EmitDefaultValue = true)]
        public bool Hide { get; set; }

        /// <summary>
        /// The sort order (asc or desc)
        /// </summary>
        /// <value>The sort order (asc or desc)</value>
        [DataMember(Name = "sort", EmitDefaultValue = true)]
        public string Sort { get; set; }

        /// <summary>
        /// The index of the sort to determine the order in which the sorts are applied
        /// </summary>
        /// <value>The index of the sort to determine the order in which the sorts are applied</value>
        [DataMember(Name = "sortIndex", EmitDefaultValue = true)]
        public int? SortIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ColumnStateType {\n");
            sb.Append("  ColId: ").Append(ColId).Append("\n");
            sb.Append("  Hide: ").Append(Hide).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  SortIndex: ").Append(SortIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ColumnStateType);
        }

        /// <summary>
        /// Returns true if ColumnStateType instances are equal
        /// </summary>
        /// <param name="input">Instance of ColumnStateType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ColumnStateType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ColId == input.ColId ||
                    (this.ColId != null &&
                    this.ColId.Equals(input.ColId))
                ) && 
                (
                    this.Hide == input.Hide ||
                    this.Hide.Equals(input.Hide)
                ) && 
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.Equals(input.Sort))
                ) && 
                (
                    this.SortIndex == input.SortIndex ||
                    (this.SortIndex != null &&
                    this.SortIndex.Equals(input.SortIndex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ColId != null)
                {
                    hashCode = (hashCode * 59) + this.ColId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Hide.GetHashCode();
                if (this.Sort != null)
                {
                    hashCode = (hashCode * 59) + this.Sort.GetHashCode();
                }
                if (this.SortIndex != null)
                {
                    hashCode = (hashCode * 59) + this.SortIndex.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ColId (string) minLength
            if (this.ColId != null && this.ColId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ColId, length must be greater than 1.", new [] { "ColId" });
            }

            yield break;
        }
    }
}
