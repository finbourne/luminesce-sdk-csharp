/*
 * FINBOURNE Luminesce Web API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Luminesce.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Luminesce.Sdk.Model
{
    /// <summary>
    /// Treatment of a single field within a QueryDesign
    /// </summary>
    [DataContract(Name = "FieldDesign")]
    public partial class FieldDesign : IEquatable<FieldDesign>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [DataMember(Name = "dataType", EmitDefaultValue = false)]
        public DataType? DataType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldDesign" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FieldDesign() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldDesign" /> class.
        /// </summary>
        /// <param name="name">Name of the Field (column name, constant, complex expression, etc.) (required).</param>
        /// <param name="alias">Alias if any (if none the Name is used).</param>
        /// <param name="dataType">dataType.</param>
        /// <param name="shouldSelect">Should this be selected? False would imply it is only being filtered on.  Ignored when Aggregations are present.</param>
        /// <param name="filters">Filter clauses to apply to this field (And&#39;ed together).</param>
        /// <param name="aggregations">Aggregations to apply (as opposed to simply selecting).</param>
        /// <param name="isExpression">Is this field an expression.</param>
        public FieldDesign(string name = default(string), string alias = default(string), DataType ?dataType = default(DataType?), bool shouldSelect = default(bool), List<FilterTermDesign> filters = default(List<FilterTermDesign>), List<Aggregation> aggregations = default(List<Aggregation>), bool isExpression = default(bool))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for FieldDesign and cannot be null");
            }
            this.Name = name;
            this.Alias = alias;
            this.DataType = dataType;
            this.ShouldSelect = shouldSelect;
            this.Filters = filters;
            this.Aggregations = aggregations;
            this.IsExpression = isExpression;
        }

        /// <summary>
        /// Name of the Field (column name, constant, complex expression, etc.)
        /// </summary>
        /// <value>Name of the Field (column name, constant, complex expression, etc.)</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Alias if any (if none the Name is used)
        /// </summary>
        /// <value>Alias if any (if none the Name is used)</value>
        [DataMember(Name = "alias", EmitDefaultValue = true)]
        public string Alias { get; set; }

        /// <summary>
        /// Should this be selected? False would imply it is only being filtered on.  Ignored when Aggregations are present
        /// </summary>
        /// <value>Should this be selected? False would imply it is only being filtered on.  Ignored when Aggregations are present</value>
        [DataMember(Name = "shouldSelect", EmitDefaultValue = true)]
        public bool ShouldSelect { get; set; }

        /// <summary>
        /// Filter clauses to apply to this field (And&#39;ed together)
        /// </summary>
        /// <value>Filter clauses to apply to this field (And&#39;ed together)</value>
        [DataMember(Name = "filters", EmitDefaultValue = true)]
        public List<FilterTermDesign> Filters { get; set; }

        /// <summary>
        /// Aggregations to apply (as opposed to simply selecting)
        /// </summary>
        /// <value>Aggregations to apply (as opposed to simply selecting)</value>
        [DataMember(Name = "aggregations", EmitDefaultValue = true)]
        public List<Aggregation> Aggregations { get; set; }

        /// <summary>
        /// Is this field an expression
        /// </summary>
        /// <value>Is this field an expression</value>
        [DataMember(Name = "isExpression", EmitDefaultValue = true)]
        public bool IsExpression { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FieldDesign {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  ShouldSelect: ").Append(ShouldSelect).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  Aggregations: ").Append(Aggregations).Append("\n");
            sb.Append("  IsExpression: ").Append(IsExpression).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FieldDesign);
        }

        /// <summary>
        /// Returns true if FieldDesign instances are equal
        /// </summary>
        /// <param name="input">Instance of FieldDesign to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldDesign input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Alias == input.Alias ||
                    (this.Alias != null &&
                    this.Alias.Equals(input.Alias))
                ) && 
                (
                    this.DataType == input.DataType ||
                    this.DataType.Equals(input.DataType)
                ) && 
                (
                    this.ShouldSelect == input.ShouldSelect ||
                    this.ShouldSelect.Equals(input.ShouldSelect)
                ) && 
                (
                    this.Filters == input.Filters ||
                    this.Filters != null &&
                    input.Filters != null &&
                    this.Filters.SequenceEqual(input.Filters)
                ) && 
                (
                    this.Aggregations == input.Aggregations ||
                    this.Aggregations != null &&
                    input.Aggregations != null &&
                    this.Aggregations.SequenceEqual(input.Aggregations)
                ) && 
                (
                    this.IsExpression == input.IsExpression ||
                    this.IsExpression.Equals(input.IsExpression)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Alias != null)
                {
                    hashCode = (hashCode * 59) + this.Alias.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DataType.GetHashCode();
                hashCode = (hashCode * 59) + this.ShouldSelect.GetHashCode();
                if (this.Filters != null)
                {
                    hashCode = (hashCode * 59) + this.Filters.GetHashCode();
                }
                if (this.Aggregations != null)
                {
                    hashCode = (hashCode * 59) + this.Aggregations.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsExpression.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // Alias (string) maxLength
            if (this.Alias != null && this.Alias.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Alias, length must be less than 256.", new [] { "Alias" });
            }

            // Alias (string) minLength
            if (this.Alias != null && this.Alias.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Alias, length must be greater than 0.", new [] { "Alias" });
            }

            yield break;
        }
    }
}
