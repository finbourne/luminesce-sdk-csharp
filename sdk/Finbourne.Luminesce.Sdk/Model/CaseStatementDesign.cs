/*
 * FINBOURNE Luminesce Web API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Luminesce.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Luminesce.Sdk.Model
{
    /// <summary>
    /// Representation of the selected field and a list of: filter, source, and target.
    /// </summary>
    [DataContract(Name = "CaseStatementDesign")]
    public partial class CaseStatementDesign : IEquatable<CaseStatementDesign>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CaseStatementDesign" /> class.
        /// </summary>
        /// <param name="selectedField">Selected field in the SQL query..</param>
        /// <param name="caseStatementItems">A list containing the filter, source, and target..</param>
        public CaseStatementDesign(string selectedField = default(string), List<CaseStatementItem> caseStatementItems = default(List<CaseStatementItem>))
        {
            this.SelectedField = selectedField;
            this.CaseStatementItems = caseStatementItems;
        }

        /// <summary>
        /// Selected field in the SQL query.
        /// </summary>
        /// <value>Selected field in the SQL query.</value>
        [DataMember(Name = "selectedField", EmitDefaultValue = true)]
        public string SelectedField { get; set; }

        /// <summary>
        /// A list containing the filter, source, and target.
        /// </summary>
        /// <value>A list containing the filter, source, and target.</value>
        [DataMember(Name = "caseStatementItems", EmitDefaultValue = true)]
        public List<CaseStatementItem> CaseStatementItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CaseStatementDesign {\n");
            sb.Append("  SelectedField: ").Append(SelectedField).Append("\n");
            sb.Append("  CaseStatementItems: ").Append(CaseStatementItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CaseStatementDesign);
        }

        /// <summary>
        /// Returns true if CaseStatementDesign instances are equal
        /// </summary>
        /// <param name="input">Instance of CaseStatementDesign to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CaseStatementDesign input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SelectedField == input.SelectedField ||
                    (this.SelectedField != null &&
                    this.SelectedField.Equals(input.SelectedField))
                ) && 
                (
                    this.CaseStatementItems == input.CaseStatementItems ||
                    this.CaseStatementItems != null &&
                    input.CaseStatementItems != null &&
                    this.CaseStatementItems.SequenceEqual(input.CaseStatementItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SelectedField != null)
                {
                    hashCode = (hashCode * 59) + this.SelectedField.GetHashCode();
                }
                if (this.CaseStatementItems != null)
                {
                    hashCode = (hashCode * 59) + this.CaseStatementItems.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
