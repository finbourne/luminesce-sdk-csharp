/*
 * FINBOURNE Luminesce Web API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Luminesce.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Luminesce.Sdk.Model
{
    /// <summary>
    /// Filter types
    /// </summary>
    /// <value>Filter types</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum Type
    {
        /// <summary>
        /// Enum Unset for value: Unset
        /// </summary>
        [EnumMember(Value = "Unset")]
        Unset = 1,

        /// <summary>
        /// Enum Contains for value: contains
        /// </summary>
        [EnumMember(Value = "contains")]
        Contains = 2,

        /// <summary>
        /// Enum StartsWith for value: startsWith
        /// </summary>
        [EnumMember(Value = "startsWith")]
        StartsWith = 3,

        /// <summary>
        /// Enum Set for value: set
        /// </summary>
        [EnumMember(Value = "set")]
        Set = 4,

        /// <summary>
        /// Enum Equals for value: equals
        /// </summary>
        [EnumMember(Value = "equals")]
        Equals = 5,

        /// <summary>
        /// Enum LessThan for value: lessThan
        /// </summary>
        [EnumMember(Value = "lessThan")]
        LessThan = 6,

        /// <summary>
        /// Enum GreaterThan for value: greaterThan
        /// </summary>
        [EnumMember(Value = "greaterThan")]
        GreaterThan = 7,

        /// <summary>
        /// Enum GreaterThanOrEqual for value: greaterThanOrEqual
        /// </summary>
        [EnumMember(Value = "greaterThanOrEqual")]
        GreaterThanOrEqual = 8,

        /// <summary>
        /// Enum LessThanOrEqual for value: lessThanOrEqual
        /// </summary>
        [EnumMember(Value = "lessThanOrEqual")]
        LessThanOrEqual = 9,

        /// <summary>
        /// Enum NotEqual for value: notEqual
        /// </summary>
        [EnumMember(Value = "notEqual")]
        NotEqual = 10,

        /// <summary>
        /// Enum Exists for value: Exists
        /// </summary>
        [EnumMember(Value = "Exists")]
        Exists = 11,

        /// <summary>
        /// Enum NotExists for value: NotExists
        /// </summary>
        [EnumMember(Value = "NotExists")]
        NotExists = 12,

        /// <summary>
        /// Enum InRange for value: inRange
        /// </summary>
        [EnumMember(Value = "inRange")]
        InRange = 13,

        /// <summary>
        /// Enum AnyOf for value: AnyOf
        /// </summary>
        [EnumMember(Value = "AnyOf")]
        AnyOf = 14
    }

}
