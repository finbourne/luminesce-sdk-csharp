/*
 * FINBOURNE Luminesce Web API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Luminesce.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Luminesce.Sdk.Model
{
    /// <summary>
    /// Representation of the data we will get from the dashboard
    /// </summary>
    [DataContract(Name = "LusidGridData")]
    public partial class LusidGridData : IEquatable<LusidGridData>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DashboardType
        /// </summary>
        [DataMember(Name = "dashboardType", EmitDefaultValue = false)]
        public DashboardType? DashboardType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LusidGridData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LusidGridData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LusidGridData" /> class.
        /// </summary>
        /// <param name="lusidGridDesign">lusidGridDesign (required).</param>
        /// <param name="resourceId">resourceId (required).</param>
        /// <param name="dashboardType">dashboardType.</param>
        /// <param name="useSettleDate">Whether to use the Settlement date or the Transaction date.</param>
        /// <param name="dates">dates.</param>
        public LusidGridData(TableView lusidGridDesign = default(TableView), ResourceId resourceId = default(ResourceId), DashboardType ?dashboardType = default(DashboardType?), bool? useSettleDate = default(bool?), DateParameters dates = default(DateParameters))
        {
            // to ensure "lusidGridDesign" is required (not null)
            if (lusidGridDesign == null)
            {
                throw new ArgumentNullException("lusidGridDesign is a required property for LusidGridData and cannot be null");
            }
            this.LusidGridDesign = lusidGridDesign;
            // to ensure "resourceId" is required (not null)
            if (resourceId == null)
            {
                throw new ArgumentNullException("resourceId is a required property for LusidGridData and cannot be null");
            }
            this.ResourceId = resourceId;
            this.DashboardType = dashboardType;
            this.UseSettleDate = useSettleDate;
            this.Dates = dates;
        }

        /// <summary>
        /// Gets or Sets LusidGridDesign
        /// </summary>
        [DataMember(Name = "lusidGridDesign", IsRequired = true, EmitDefaultValue = true)]
        public TableView LusidGridDesign { get; set; }

        /// <summary>
        /// Gets or Sets ResourceId
        /// </summary>
        [DataMember(Name = "resourceId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId ResourceId { get; set; }

        /// <summary>
        /// Whether to use the Settlement date or the Transaction date
        /// </summary>
        /// <value>Whether to use the Settlement date or the Transaction date</value>
        [DataMember(Name = "useSettleDate", EmitDefaultValue = true)]
        public bool? UseSettleDate { get; set; }

        /// <summary>
        /// Gets or Sets Dates
        /// </summary>
        [DataMember(Name = "dates", EmitDefaultValue = false)]
        public DateParameters Dates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LusidGridData {\n");
            sb.Append("  LusidGridDesign: ").Append(LusidGridDesign).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  DashboardType: ").Append(DashboardType).Append("\n");
            sb.Append("  UseSettleDate: ").Append(UseSettleDate).Append("\n");
            sb.Append("  Dates: ").Append(Dates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LusidGridData);
        }

        /// <summary>
        /// Returns true if LusidGridData instances are equal
        /// </summary>
        /// <param name="input">Instance of LusidGridData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LusidGridData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LusidGridDesign == input.LusidGridDesign ||
                    (this.LusidGridDesign != null &&
                    this.LusidGridDesign.Equals(input.LusidGridDesign))
                ) && 
                (
                    this.ResourceId == input.ResourceId ||
                    (this.ResourceId != null &&
                    this.ResourceId.Equals(input.ResourceId))
                ) && 
                (
                    this.DashboardType == input.DashboardType ||
                    this.DashboardType.Equals(input.DashboardType)
                ) && 
                (
                    this.UseSettleDate == input.UseSettleDate ||
                    (this.UseSettleDate != null &&
                    this.UseSettleDate.Equals(input.UseSettleDate))
                ) && 
                (
                    this.Dates == input.Dates ||
                    (this.Dates != null &&
                    this.Dates.Equals(input.Dates))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LusidGridDesign != null)
                {
                    hashCode = (hashCode * 59) + this.LusidGridDesign.GetHashCode();
                }
                if (this.ResourceId != null)
                {
                    hashCode = (hashCode * 59) + this.ResourceId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DashboardType.GetHashCode();
                if (this.UseSettleDate != null)
                {
                    hashCode = (hashCode * 59) + this.UseSettleDate.GetHashCode();
                }
                if (this.Dates != null)
                {
                    hashCode = (hashCode * 59) + this.Dates.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
