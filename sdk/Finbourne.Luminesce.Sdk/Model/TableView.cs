/*
 * FINBOURNE Luminesce Web API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Luminesce.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Luminesce.Sdk.Model
{
    /// <summary>
    /// Representation of the table structure
    /// </summary>
    [DataContract(Name = "TableView")]
    public partial class TableView : IEquatable<TableView>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TableView" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TableView() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TableView" /> class.
        /// </summary>
        /// <param name="headerNames">Mapping of column ids to aliases (required).</param>
        /// <param name="columnState">Array of all columns in the dashboard (required).</param>
        /// <param name="filters">Filters applied to columns in the dashboard.</param>
        /// <param name="meta">meta (required).</param>
        public TableView(Dictionary<string, string> headerNames = default(Dictionary<string, string>), List<ColumnStateType> columnState = default(List<ColumnStateType>), Dictionary<string, FilterModel> filters = default(Dictionary<string, FilterModel>), TableMeta meta = default(TableMeta))
        {
            // to ensure "headerNames" is required (not null)
            if (headerNames == null)
            {
                throw new ArgumentNullException("headerNames is a required property for TableView and cannot be null");
            }
            this.HeaderNames = headerNames;
            // to ensure "columnState" is required (not null)
            if (columnState == null)
            {
                throw new ArgumentNullException("columnState is a required property for TableView and cannot be null");
            }
            this.ColumnState = columnState;
            // to ensure "meta" is required (not null)
            if (meta == null)
            {
                throw new ArgumentNullException("meta is a required property for TableView and cannot be null");
            }
            this.Meta = meta;
            this.Filters = filters;
        }

        /// <summary>
        /// Mapping of column ids to aliases
        /// </summary>
        /// <value>Mapping of column ids to aliases</value>
        [DataMember(Name = "headerNames", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> HeaderNames { get; set; }

        /// <summary>
        /// Array of all columns in the dashboard
        /// </summary>
        /// <value>Array of all columns in the dashboard</value>
        [DataMember(Name = "columnState", IsRequired = true, EmitDefaultValue = true)]
        public List<ColumnStateType> ColumnState { get; set; }

        /// <summary>
        /// Filters applied to columns in the dashboard
        /// </summary>
        /// <value>Filters applied to columns in the dashboard</value>
        [DataMember(Name = "filters", EmitDefaultValue = true)]
        public Dictionary<string, FilterModel> Filters { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name = "meta", IsRequired = true, EmitDefaultValue = true)]
        public TableMeta Meta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TableView {\n");
            sb.Append("  HeaderNames: ").Append(HeaderNames).Append("\n");
            sb.Append("  ColumnState: ").Append(ColumnState).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TableView);
        }

        /// <summary>
        /// Returns true if TableView instances are equal
        /// </summary>
        /// <param name="input">Instance of TableView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TableView input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HeaderNames == input.HeaderNames ||
                    this.HeaderNames != null &&
                    input.HeaderNames != null &&
                    this.HeaderNames.SequenceEqual(input.HeaderNames)
                ) && 
                (
                    this.ColumnState == input.ColumnState ||
                    this.ColumnState != null &&
                    input.ColumnState != null &&
                    this.ColumnState.SequenceEqual(input.ColumnState)
                ) && 
                (
                    this.Filters == input.Filters ||
                    this.Filters != null &&
                    input.Filters != null &&
                    this.Filters.SequenceEqual(input.Filters)
                ) && 
                (
                    this.Meta == input.Meta ||
                    (this.Meta != null &&
                    this.Meta.Equals(input.Meta))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HeaderNames != null)
                {
                    hashCode = (hashCode * 59) + this.HeaderNames.GetHashCode();
                }
                if (this.ColumnState != null)
                {
                    hashCode = (hashCode * 59) + this.ColumnState.GetHashCode();
                }
                if (this.Filters != null)
                {
                    hashCode = (hashCode * 59) + this.Filters.GetHashCode();
                }
                if (this.Meta != null)
                {
                    hashCode = (hashCode * 59) + this.Meta.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
