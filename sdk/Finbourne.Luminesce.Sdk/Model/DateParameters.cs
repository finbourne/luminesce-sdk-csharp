/*
 * FINBOURNE Luminesce Web API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Luminesce.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Luminesce.Sdk.Model
{
    /// <summary>
    /// Collection of date parameters used in dashboards
    /// </summary>
    [DataContract(Name = "DateParameters")]
    public partial class DateParameters : IEquatable<DateParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DateParameters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DateParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DateParameters" /> class.
        /// </summary>
        /// <param name="dateFrom">Parameter to determine the lower bound in a date range.</param>
        /// <param name="dateTo">Parameter to determine the upper bound in a date range.</param>
        /// <param name="effectiveAt">EffectiveAt of the dashboard.</param>
        /// <param name="asAt">AsAt of the dashboard (required).</param>
        public DateParameters(DateTimeOffset? dateFrom = default(DateTimeOffset?), DateTimeOffset? dateTo = default(DateTimeOffset?), DateTimeOffset? effectiveAt = default(DateTimeOffset?), DateTimeOffset asAt = default(DateTimeOffset))
        {
            this.AsAt = asAt;
            this.DateFrom = dateFrom;
            this.DateTo = dateTo;
            this.EffectiveAt = effectiveAt;
        }

        /// <summary>
        /// Parameter to determine the lower bound in a date range
        /// </summary>
        /// <value>Parameter to determine the lower bound in a date range</value>
        [DataMember(Name = "dateFrom", EmitDefaultValue = true)]
        public DateTimeOffset? DateFrom { get; set; }

        /// <summary>
        /// Parameter to determine the upper bound in a date range
        /// </summary>
        /// <value>Parameter to determine the upper bound in a date range</value>
        [DataMember(Name = "dateTo", EmitDefaultValue = true)]
        public DateTimeOffset? DateTo { get; set; }

        /// <summary>
        /// EffectiveAt of the dashboard
        /// </summary>
        /// <value>EffectiveAt of the dashboard</value>
        [DataMember(Name = "effectiveAt", EmitDefaultValue = true)]
        public DateTimeOffset? EffectiveAt { get; set; }

        /// <summary>
        /// AsAt of the dashboard
        /// </summary>
        /// <value>AsAt of the dashboard</value>
        [DataMember(Name = "asAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset AsAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DateParameters {\n");
            sb.Append("  DateFrom: ").Append(DateFrom).Append("\n");
            sb.Append("  DateTo: ").Append(DateTo).Append("\n");
            sb.Append("  EffectiveAt: ").Append(EffectiveAt).Append("\n");
            sb.Append("  AsAt: ").Append(AsAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DateParameters);
        }

        /// <summary>
        /// Returns true if DateParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of DateParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateParameters input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DateFrom == input.DateFrom ||
                    (this.DateFrom != null &&
                    this.DateFrom.Equals(input.DateFrom))
                ) && 
                (
                    this.DateTo == input.DateTo ||
                    (this.DateTo != null &&
                    this.DateTo.Equals(input.DateTo))
                ) && 
                (
                    this.EffectiveAt == input.EffectiveAt ||
                    (this.EffectiveAt != null &&
                    this.EffectiveAt.Equals(input.EffectiveAt))
                ) && 
                (
                    this.AsAt == input.AsAt ||
                    (this.AsAt != null &&
                    this.AsAt.Equals(input.AsAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateFrom != null)
                {
                    hashCode = (hashCode * 59) + this.DateFrom.GetHashCode();
                }
                if (this.DateTo != null)
                {
                    hashCode = (hashCode * 59) + this.DateTo.GetHashCode();
                }
                if (this.EffectiveAt != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveAt.GetHashCode();
                }
                if (this.AsAt != null)
                {
                    hashCode = (hashCode * 59) + this.AsAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
